"use strict";(self.webpackChunkcrypto_tracker=self.webpackChunkcrypto_tracker||[]).push([[7769],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},9791:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"state-management","title":"State Management","description":"This document explains the state management approach used in CryptoTrackPro.","source":"@site/docs/state-management.md","sourceDirName":".","slug":"/state-management","permalink":"/docs/state-management","draft":false,"unlisted":false,"editUrl":"https://github.com/your-github-user/crypto-tracker/edit/main/docs-site/docs/state-management.md","tags":[],"version":"current","frontMatter":{"id":"state-management","title":"State Management","sidebar_label":"State Management"},"sidebar":"Sidebar","previous":{"title":"API Integration","permalink":"/docs/api-integration"},"next":{"title":"Authentication (Optional)","permalink":"/docs/authentication"}}');var s=t(4848),a=t(8453);const i={id:"state-management",title:"State Management",sidebar_label:"State Management"},o="State Management",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Zustand for Global State",id:"zustand-for-global-state",level:2},{value:"Auth Store Example",id:"auth-store-example",level:3},{value:"Theme Store Example",id:"theme-store-example",level:3},{value:"React Query for Server State",id:"react-query-for-server-state",level:2},{value:"Component-Level State",id:"component-level-state",level:2},{value:"Why This Approach?",id:"why-this-approach",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"state-management",children:"State Management"})}),"\n",(0,s.jsx)(n.p,{children:"This document explains the state management approach used in CryptoTrackPro."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The application uses a combination of state management solutions:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Zustand"}),": For global application state (auth, theme)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"React Query"}),": For server state and data fetching"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"React's useState/useEffect"}),": For component-level state"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"zustand-for-global-state",children:"Zustand for Global State"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/pmndrs/zustand",children:"Zustand"})," was chosen for global state management because it provides:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Simple and lightweight API"}),"\n",(0,s.jsx)(n.li,{children:"No boilerplate compared to Redux"}),"\n",(0,s.jsx)(n.li,{children:"TypeScript support"}),"\n",(0,s.jsx)(n.li,{children:"Built-in persistence"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"auth-store-example",children:"Auth Store Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// From lib/store/auth-store.ts\r\nimport { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\nimport { toast } from 'react-toastify';\r\nimport { User } from '@/lib/types/schema';\r\n\r\ninterface AuthState {\r\n  user: User | null;\r\n  token: string | null;\r\n  isLoading: boolean;\r\n  isChecking: boolean;\r\n  error: string | null;\r\n  setUser: (user: User | null) => void;\r\n  setToken: (token: string | null) => void;\r\n  checkAuth: () => Promise<void>;\r\n  login: (email: string, password: string) => Promise<any>;\r\n  register: (name: string, email: string, password: string) => Promise<any>;\r\n  logout: () => Promise<void>;\r\n}\r\n\r\nexport const useAuthStore = create<AuthState>()(\r\n  persist(\r\n    (set) => ({\r\n      user: null,\r\n      token: null,\r\n      isLoading: false,\r\n      isChecking: false,\r\n      error: null,\r\n      setUser: (user) => set({ user }),\r\n      setToken: (token) => set({ token }),\r\n      \r\n      checkAuth: async () => {\r\n        // Implementation...\r\n      },\r\n      \r\n      login: async (email, password) => {\r\n        // Implementation...\r\n      },\r\n      \r\n      register: async (name, email, password) => {\r\n        // Implementation...\r\n      },\r\n      \r\n      logout: async () => {\r\n        // Implementation...\r\n      },\r\n    }),\r\n    {\r\n      name: 'auth-storage',\r\n      partialize: (state) => ({\r\n        user: state.user,\r\n        token: state.token \r\n      })\r\n    }\r\n  )\r\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"theme-store-example",children:"Theme Store Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// From lib/store/theme.ts\r\nimport { create } from "zustand";\r\n\r\ninterface ThemeState {\r\n  isDark: boolean;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nexport const useThemeStore = create<ThemeState>((set) => ({\r\n  isDark: false,\r\n  toggleTheme: () => set((state) => ({ isDark: !state.isDark })),\r\n}));\n'})}),"\n",(0,s.jsx)(n.h2,{id:"react-query-for-server-state",children:"React Query for Server State"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://tanstack.com/query/latest",children:"React Query"})," is used for managing server state because it provides:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Automatic caching"}),"\n",(0,s.jsx)(n.li,{children:"Refetching mechanisms"}),"\n",(0,s.jsx)(n.li,{children:"Loading and error states -> Better Error Handling"}),"\n",(0,s.jsx)(n.li,{children:"Pagination support"}),"\n",(0,s.jsx)(n.li,{children:"Devtools for debugging"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// From app/dashboard/page.tsx\r\nconst { \r\n  data, \r\n  isLoading, \r\n  isError, \r\n  error, \r\n  refetch, \r\n  isFetching,\r\n  dataUpdatedAt\r\n} = useQuery({\r\n  queryKey: ['cryptocurrencies'],\r\n  queryFn: fetchCryptocurrencies,\r\n  refetchInterval: 3000, // Auto-refresh every 3 seconds\r\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"component-level-state",children:"Component-Level State"}),"\n",(0,s.jsx)(n.p,{children:"React's built-in state management (useState, useEffect) is used for component-specific state:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// From app/dashboard/page.tsx\r\nconst [searchTerm, setSearchTerm] = useState('');\r\nconst debouncedSearchTerm = useDebounce(searchTerm, 500);\r\nconst [previousPrices, setPreviousPrices] = useState<Record<string, string>>({});\r\nconst [changedCryptos, setChangedCryptos] = useState<string[]>([]);\r\nconst [pricePulseMap, setPricePulseMap] = useState<Record<string, 'increase' | 'decrease' | null>>({});\r\nconst [page, setPage] = useState(1);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"why-this-approach",children:"Why This Approach?"}),"\n",(0,s.jsx)(n.p,{children:"This combined approach was chosen because:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Separation of concerns"}),": Zustand manages application state, React Query handles server state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance"}),": Each solution is optimized for its specific use case"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Developer experience"}),": Simple APIs and excellent TypeScript support"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Bundle size"}),": Both Zustand and React Query are lightweight"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scalability"}),": This architecture scales well as the application grows"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);